<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
#parse('/tcom/const.inc.vm')
<html>
        <head>
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
            <title>RAP - $!utils.escapeInH($page.name)控制台</title>
            <link rel="stylesheet" href="${staticRoot}/bootstrap/css/bootstrap.css?_r=$!timeStamp" type="text/css" media="screen">
            <link rel="stylesheet" href="${staticRoot}/bootstrap/css/bootstrap-responsive.css?_r=$!timeStamp" type="text/css" media="screen">
            <link rel="stylesheet" href="${staticRoot}/css/rap.template.css?_r=$!timeStamp" type="text/css" media="screen">
            <link type="text/css" rel="stylesheet" href="${staticRoot}/css/pageTester.css?_r=$!timeStamp" />
            <script src="http://a.tbcdn.cn/??s/yui/3.6.0/build/yui/yui-min.js"></script>
            <script src="${staticRoot}/js/util/jsformat.js"></script>
            <script src="${staticRoot}/js/util/structureValidator.js"></script>
            <script src="${staticRoot}/js/util/mock-min.js"></script>

            <script src="${staticRoot}/js/base.js"></script>
        </head>
        <body>
        <h3>$!utils.escapeInH($page.name) - 控制台</h3>
        <div id="divRootSetting">
            <label style="color:#666;display: inline; margin-right: 5px;" for="txtRootPath">请求根路径 </label><input id="txtRootPath" type="text" style="width:300px;" value=""></input>
        </div>
        <div id="divActionList" class="demo tabs">
            <div class="nav nav-tabs">
            #foreach($action in $page.actionList)
                <li><a href="#">$!utils.escapeInH($action.name)</a></li>
            #end
            <!--
                <li><a href="#">MODIFY</a></li>
                <li><a href="#">RESET</a></li>
                 -->
            </div>
            #foreach($action in $page.actionList)
            <div class="tester-form tab" style="display: none;">
                <form name="form$!velocityCount" class="form" method="post" path="$!action.requestUrl" onsubmit="return false;">
                    <input type="hidden" name="paramIdList" class="paramIdList" value="$!action.remarks" />
                    <div class="p8">
                        <div style="margin-top:5px;">请求标识: <span style="color:#990000;">$action.id</span></div>
                        <div style="margin-top:5px;">请求地址: $!utils.escapeInH($action.requestUrl)</div>
                    </div>
                    <div class="clearfix">
                    #foreach($para in $action.requestParameterList)
                    <div class="item">
                        <label><span class="name">$!para.identifier</span><input type="text" style="width:100px" class="field" name="$!para.identifier" /></span>
                        <span class="remark">
                            <span style="font-size: 12px;">说明</span>
                            <div class="detail">
                                <div>- 变量名：$!para.name</div>
                                <div>- 备注：$!para.remark</div>
                            </div>
                        </span>
                    </div>
                    #end
                    </div>
                    <div class="p8">
                        <input type="button" class="btn btn-primary btn-run" value="生成模拟数据"/>
                        <input type="button" class="btn btn-primary btn-run-mockjsrule" style="margin-left:5px;" value="获取Mockjs规则"/>
                    </div>
                </form>
            </div>
            #end
            <div class="tester-form tab" style="display: none;">
                <div class="item">
                    <input type="text" value="" id="txtActionId" placeholder="请输入Action ID" />
                </div>
                <div class="item">
                    <textarea id="textareaModifyScript" placeholder="请输入脚本"></textarea>
                </div>
                <div class="item">
                    <input type="button" class="btn btn-primary" value="生成请求" id="btnShowScript" />
                    <input type="button" class="btn btn-danger" value="Modify" id="btnModify" />
                </div>
            </div>
            <div class="tester-form tab" style="display: none;">
                <div class="item" id="divResetUrl">请求地址：fe.lzdp.us:8806/rap/mock/reset.action?projectId=$!projectId</div>
                <div class="item"><input type="button" class="btn btn-danger" value="Reset" id="btnReset" /></div>
            </div>
        </div>
        <div class="block" id="divResBoard">
            <div id="divResBoardJson">ready</div>
            <div id="divResBoardLog">
                <div class="triggers clearfix">
                	<div class="trigger" id="expand-trigger">&#8592;</div>
                    <div class="trigger" id="up-trigger">&#8593;</div>
                    <div class="trigger" id="down-trigger">&#8595;</div>
                    <div class="trigger" id="close-trigger">&#8594;</div>
                </div>
            </div>
            <div class="clear"></div>
        </div>
        <div class="trigger" id="show-trigger">&#8592;</div>
        <script>
            if (!window.console) {
                window.console = {
                    log : function() {},
                    warn : function() {},
                    err : function() {}
                };
            }

            var RAP_ROOT = '$consts.DOMAIN_URL$!projectContext/mockjs/$!projectId';

            document.getElementById("txtRootPath").value = RAP_ROOT;

            function wrapHref(url) {
                return '<a href="' + url + '" target="_blank">' + url + '</a>';
            }

            YUI().use('handlebars', 'node', 'event', 'jsonp', 'jsonp-url', 'json-stringify', function (Y) {
                var source = Y.one("#resBoard-template"),
                    TResBoard = Y.Handlebars.compile(source),
                    divLog = document.getElementById("divResBoardLog"),
                    ERROR = -1, WARN = -2,                                // log type
                    LIGHT_GRAY = '#999', RED = 'red', ORANGE = 'orange',  // colors
                    _resetUrl = '',
                    _rootUrl = '',
                    _modifyUrl = '',
                    logLine = 1;

                log('tester initializing...');
                Y.timeLog = {};
                Y.all('.form').each(function(form) {
                    form.one('.btn-run-mockjsrule').on('click', function(e) {
                        Y.one('#divResBoardJson').setHTML('加载中，请稍后...');
                        var url     = '';
                        var qArr    = [];
                        var i       = 0;
                        var fields  = form.all('.field');
                        var baseUrl = Y.one('#txtRootPath').get('value');
                        var baseUrlOrigin = Y.one('#txtRootPath').get('value');
                        var rapUrl  = RAP_ROOT;
                        var path    = form.getAttribute('path');

                        if (~path.indexOf('http')) {
                            path = path.substring(7);
                            path = path.substring(path.indexOf("/"));
                        }

                        if (path[0] !== '/') {
                            path = '/' + path;
                        }

                        baseUrl += path;
                        rapUrl += path;
                        fields.each(function(field) {
                            var name = field.get('name'),
                                value = field.get('value');
                            qArr[i++] = name + '=' + encodeURIComponent(value);
                        });

                        if (!~baseUrl.indexOf('http://')) {
                            baseUrl = "http://" + baseUrl;
                        }
                        if (!~rapUrl.indexOf('http://')) {
                            rapUrl = "http://" + rapUrl;
                        }

                        url = baseUrl + (baseUrl.indexOf('?') === -1 ? '?' : '&') + qArr.join('&');
                        url = url.replace(/[{}]/g, "");
                        log('request starting, url: ' + color(wrapHref(url), LIGHT_GRAY));
                        Y.timeLog['time'] = new Date().getTime();
                        try {
                            Y.jsonp(url, {
                                on : {
                                    success : function() {
                                        var slice = Array.prototype.slice;
                                        var args = slice.call(arguments);
                                        args.push('rule');
                                        testResHandler.apply(this, args);
                                    },
                                    timeout : function() {
                                        log(color('timeout', RED) + '... so long time to response!');
                                    },
                                    failure : function(e) {
                                        log(color('error occurred!', RED) + color(', detail:' + e.errors[0].error, LIGHT_GRAY));
                                    }
                                },
                                timeout : 10000,
                                args : [form]
                            });
                        } catch(e) {
                            alert(e);
                        }
                    });
                    form.one('.btn-run').on('click', function(e) {
                        Y.one('#divResBoardJson').setHTML('加载中，请稍后...');
                        var url     = '';
                        var qArr    = [];
                        var i       = 0;
                        var fields  = form.all('.field');
                        var baseUrl = Y.one('#txtRootPath').get('value');
                        var baseUrlOrigin = Y.one('#txtRootPath').get('value');
                        var rapUrl  = RAP_ROOT;
                        var path    = form.getAttribute('path');

                        if (~path.indexOf('http')) {
                            path = path.substring(7);
                            path = path.substring(path.indexOf("/"));
                        }

                        if (path[0] !== '/') {
                            path = '/' + path;
                        }

                        baseUrl += path;
                        rapUrl += path;
                        fields.each(function(field) {
                            var name = field.get('name'),
                                value = field.get('value');
                            qArr[i++] = name + '=' + encodeURIComponent(value);
                        });

                        if (!~baseUrl.indexOf('http://')) {
                            baseUrl = "http://" + baseUrl;
                        }
                        if (!~rapUrl.indexOf('http://')) {
                            rapUrl = "http://" + rapUrl;
                        }

                        url = baseUrl + (baseUrl.indexOf('?') === -1 ? '?' : '&') + qArr.join('&');
                        url = url.replace(/[{}]/g, "");
                        log('request starting, url: ' + color(wrapHref(url), LIGHT_GRAY));
                        Y.timeLog['time'] = new Date().getTime();
                        try {
                            Y.jsonp(url, {
                                on : {
                                    success : function() {
                                        var realData = testResHandler.apply(this, arguments);
                                        if (RAP_ROOT != baseUrlOrigin) {
                                            Y.jsonp(rapUrl, {
                                                on : {
                                                    success : function(response) {

                                                        function validatorResultLog(item, isReverse) {
                                                            var LOST = "LOST";
                                                            var EMPTY_ARRAY = "EMPTY_ARRAY";
                                                            var TYPE_NOT_EQUAL = "TYPE_NOT_EQUAL";
                                                            var eventName;
                                                            if (item.type === LOST) {
                                                                eventName = isReverse ? '未在接口文档中未定义。' : '缺失';
                                                            } else if (item.type === EMPTY_ARRAY) {
                                                                eventName = '数组为空，无法判断其内部的结构。';
                                                                return; // 暂时忽略此种情况
                                                            } else if (item.type === TYPE_NOT_EQUAL) {
                                                                eventName = '数据类型与接口文档中的定义不符';
                                                            }

                                                            log('参数 ' + color(item.namespace + "." + item.property, RED) + ' ' + eventName, ERROR);

                                                        }
                                                        var jsonString = Y.JSON.stringify(response);
                                                        var path = Y.one('#txtRootPath').get('value');
                                                        var obj = eval("(" + jsonString + ")");

                                                        if (path.indexOf('mockjs') != -1) {
                                                            obj = Mock.mock(obj);
                                                        }

                                                        var validator = new StructureValidator(realData, obj);
                                                        var result = validator.getResult();
                                                        var realDataResult = result.left;
                                                        var rapDataResult = result.right;
                                                        var i;

                                                        for (i = 0; i < realDataResult.length; i++) {
                                                            validatorResultLog(realDataResult[i]);
                                                        }
                                                        for (i = 0; i < rapDataResult.length; i++) {
                                                            validatorResultLog(rapDataResult[i], true);
                                                        }
                                                    },
                                                    timeout : function() {
                                                        log(color('timeout', RED) + '... so long time to response!');
                                                    },
                                                    failure : function(e) {
                                                        console.log(color('error occurred!', RED) + color(', detail:' + e.errors[0].error, LIGHT_GRAY));
                                                    }
                                                },
                                                timeout : 10000
                                            });
                                        }
                                    },
                                    timeout : function() {
                                        log(color('timeout', RED) + '... so long time to response!');
                                    },
                                    failure : function(e) {
                                        log(color('error occurred!', RED) + color(', detail:' + e.errors[0].error, LIGHT_GRAY));
                                    }
                                },
                                timeout : 10000,
                                args : [form]
                            });
                        } catch(e) {
                            alert(e);
                        }
                    });


                    // initialize tabs
                    (function() {
                        var activeTabIndex = 0,
                            isFirst = true;

                        function clearTabsState() {
                            Y.all('.tabs .nav li').each(function(node) {
                                node.setAttribute('class', '');
                            });
                            Y.all('.tabs .tab').each(function(node) {
                                node.setAttribute('style', 'display:none');
                            });
                        }

                        function showTab(index) {
                            Y.all('.tabs .tab').get(0)[index].setAttribute('style', '');
                        }

                        Y.all('.tabs .nav li').each(function(node) {
                            if (isFirst) {
                                node.setAttribute('class', 'active');
                                isFirst = false;
                            }
                        });
                        isFirst = true;
                        Y.all('.tabs .tab').each(function(node) {
                            if (isFirst) {
                                isFirst = false;
                                node.setAttribute('style', 'display:block');
                            } else {
                                node.setAttribute('style', 'display:none');
                            }
                        });
                        var i = 0;
                        Y.all('.tabs .nav li a').each(function(node) {
                            node.on('click', (function(i) {
                                return function(e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    clearTabsState();
                                    var li = e.target.ancestor('li');
                                    li.setAttribute('class', 'active');
                                    showTab(i);
                                }
                            })(i++));
                        });

                        // initialize navigator
                        Y.all('.nav-list li a').each(function(node) {
                            var path = node.getAttribute('href'),
                                isCur = location.href.indexOf(path) > -1 ? true : false;
                            if (isCur) {
                                node.ancestor('li').setAttribute('class', 'active');
                            }
                        });

                    }());

                });

                function sortObj(obj) {
                    var result = {}, keys = [];
                    for(var prop in obj) {
                        if (obj.hasOwnProperty(prop)) {
                            keys.push(prop);
                        }
                    }
                    keys = keys.sort();
                    for(var i = 0, l = keys.length; i < l; i++) {
                        result[keys[i]] = obj[keys[i]];
                    }
                    return result;
                }

                function testResHandler(response, form, btn) {
                    var jsonString = Y.JSON.stringify(response);
                    var path = Y.one('#txtRootPath').get('value');
                    var obj = eval("(" + jsonString + ")");
                    obj = sortObj(obj);
                    if (btn != 'rule' && path.indexOf('mockjs') != -1) {
                        obj = Mock.mock(obj);
                    }

                    jsonString = JSON.stringify(obj, null, 4);

                    var beginTime = Y.timeLog['time'];
                    if (!beginTime) return;
                    var endTime = new Date().getTime();
                    log('request end in:' + color(endTime - beginTime, RED) + 'ms.');
                    Y.one('#divResBoardJson').setHTML(jsonString.formatJS());

                    if (!form) {
                        btn.removeClass('disabled');
                        return
                    };

                    return obj;
                }

                function log(msg, type) {
                    var arr = [],
                        i = 0;
                    arr[i++] = color(logLine++, ORANGE);
                    if (type === ERROR) {
                        arr[i++] = color('&nbsp;&nbsp;ERR!', RED)
                    }
                    arr[i++] = '&nbsp&nbsp;' + msg + "<br />";
                    arr[i++] = divLog.innerHTML;;
                    divLog.innerHTML = arr.join('');
                }

                function color(t, c) {
                    return '<span style="color:' + c + ';">' + t + '</span>';
                }

                function initResetTab() {
                    Y.one('#divResetUrl').setHTML('请求地址: ' + _resetUrl);
                }

                function initUrl() {
                    var path = Y.one('#txtRootPath').get('value'),
                        root = '';
                    if (path.indexOf('/') != -1) {
                        root = 'http://' + path.substring(0, path.indexOf('/'));
                    }
                    _resetUrl = root + '/rap/mock/reset.action?projectId=$!projectId';
                    _modifyUrl = root + '/rap/mock/modify.action?actionId=' + Y.one('#txtActionId').get('value')
                        + '&mockData=' + encodeURIComponent(Y.one('#textareaModifyScript').get('value'));
                    _rootUrl = root;
                    initResetTab();
                }


                initUrl();

                Y.one('#txtRootPath').on('change', initUrl);

                Y.one('#btnReset').on('click', function(e) {
                    var btn = Y.one('#btnReset'),
                        c = 'disabled';
                    if (btn.hasClass(c)) return;
                    btn.addClass(c);
                    try {
                        log('request starting, url: ' + color(wrapHref(_resetUrl), LIGHT_GRAY));
                        Y.timeLog['time'] = new Date().getTime();
                        Y.jsonp(_resetUrl, {
                            on : {
                                success : testResHandler,
                                timeout : function() {
                                    log(color('timeout', RED) + '... so long time to response!');
                                },
                                failure : function(e) {
                                    log(color('error occurred!', RED) + color(', detail:' + e.errors[0].error, LIGHT_GRAY));
                                }
                            },
                            timeout : 10000,
                            args : [null, btn]
                        });
                    } catch(e) {
                        alert(e);
                    }
                });

                Y.one('#btnShowScript').on('click', function() {
                    initUrl();
                    Y.one('#divResBoardJson').setHTML(_modifyUrl);
                });


                Y.one('#btnModify').on('click', function(e) {
                    if (Y.one('#txtActionId').get('value') == '') {
                        alert('请输入ActionId');
                        return;
                    }
                    var btn = Y.one('#btnModify'),
                        c = 'disabled';
                    if (btn.hasClass(c)) return;
                    btn.addClass(c);
                    initUrl();
                    try {
                        log('request starting, url: ' + color(wrapHref(_modifyUrl), LIGHT_GRAY));
                        Y.timeLog['time'] = new Date().getTime();
                        Y.jsonp(_modifyUrl, {
                            on : {
                                success : testResHandler,
                                timeout : function() {
                                    log(color('timeout', RED) + '... so long time to response!');
                                },
                                failure : function(e) {
                                    log(color('error occurred!', RED) + color(', detail:' + e.errors[0].error, LIGHT_GRAY));
                                }
                            },
                            timeout : 10000,
                            args : [null, btn]
                        });
                    } catch(e) {
                        alert(e);
                    }
                });

                setTimeout(function() {
                    var logContainer = $('#divResBoardLog');
                    $(document).delegate('#up-trigger', 'click', function() {
                        logContainer.animate({
                            'height': 500
                        });
                    }).delegate('#expand-trigger', 'click', function() {
                        logContainer.animate({
                            'width': '98%'
                        });
                        $('body').css('padding-bottom', '110px');
                    }).delegate('#down-trigger', 'click', function() {
                        logContainer.animate({
                            'height': 100
                        });
                    }).delegate('#close-trigger', 'click', function() {
                        logContainer.hide('slow');
                        $('#show-trigger').show('slow');
                    }).delegate('#show-trigger', 'click', function() {
                        logContainer.show('slow');
                        $('#show-trigger').hide('slow');
                    })
                }, 500);

                log('tester ready.');
            });
        </script>
        <foot>
        <script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_5879641'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "v1.cnzz.com/stat.php%3Fid%3D5879641%26show%3Dpic' type='text/javascript'%3E%3C/script%3E"));</script>
        </foot>
    </body>
</html>
